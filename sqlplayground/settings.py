"""
Django settings for sqlplayground project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from django.contrib.messages import constants as messages

# Load environment variables from .env file
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    # python-dotenv not installed, skip loading .env file
    pass

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', "django-insecure-s2e78lrr*0ta0brx-j2wifziwg*cnpp)9i*pjd)@ob8323kxc(")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '').split(',') if os.environ.get('ALLOWED_HOSTS') else ['kodesql.in', 'www.kodesql.in', 'localhost', '127.0.0.1', 'testserver']

# =============================================================================
# CORS CONFIGURATION
# =============================================================================

# CORS settings for production and development access
CORS_ALLOWED_ORIGINS = os.environ.get('CORS_ALLOWED_ORIGINS', '').split(',') if os.environ.get('CORS_ALLOWED_ORIGINS') else [
    "https://kodesql.in",
    "https://www.kodesql.in",
    "http://127.0.0.1:8000",
    "http://localhost:8000",
    "http://127.0.0.1:8007",
    "http://localhost:8007",
]

# Allow all origins in development (be careful in production)
CORS_ALLOW_ALL_ORIGINS = os.environ.get('CORS_ALLOW_ALL_ORIGINS', 'False').lower() == 'true'

# Allow credentials to be included in CORS requests
CORS_ALLOW_CREDENTIALS = os.environ.get('CORS_ALLOW_CREDENTIALS', 'True').lower() == 'true'

# Allow specific headers
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Allow specific methods
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Application definition

INSTALLED_APPS = [
    # Enhanced Admin Interface (must be before django.contrib.admin)
    "admin_interface",
    "colorfield",

    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",

    # Third-party apps
    "corsheaders",
    "django_ckeditor_5",
    "import_export",
    "django_cleanup.apps.CleanupConfig",

    # Django Allauth
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",

    # Local apps
    "core",
    "users",
    "editor",
    "challenges",
    "tutorials",
    "courses",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # WhiteNoise for static files
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "allauth.account.middleware.AccountMiddleware",  # Django Allauth middleware
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",

]

ROOT_URLCONF = "sqlplayground.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "sqlplayground.wsgi.application"


# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# Multi-database setup for SQL Playground:
# - Primary PostgreSQL: Django models (users, challenges, progress, etc.)
# - Query PostgreSQL: SQL challenge execution for PostgreSQL engine
# - Query MySQL: SQL challenge execution for MySQL engine

DATABASES = {
    # Primary database for all Django models and website data
    'default': {
        'ENGINE': os.environ.get('PRIMARY_DB_ENGINE', 'django.db.backends.postgresql'),
        'NAME': os.environ.get('PRIMARY_DB_NAME', 'sqlplayground_main'),
        'HOST': os.environ.get('PRIMARY_DB_HOST', 'localhost'),
        'PORT': os.environ.get('PRIMARY_DB_PORT', '5432'),
        'USER': os.environ.get('PRIMARY_DB_USER', 'postgres'),
        'PASSWORD': os.environ.get('PRIMARY_DB_PASSWORD', ''),
        'OPTIONS': {},
        'CONN_MAX_AGE': 0,
        'CONN_HEALTH_CHECKS': False,
    },

    # Secondary PostgreSQL database for query execution
    'query_postgres': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('QUERY_POSTGRES_DB_NAME', 'sqlplayground_queries_pg'),
        'HOST': os.environ.get('QUERY_POSTGRES_HOST', 'localhost'),
        'PORT': os.environ.get('QUERY_POSTGRES_PORT', '5432'),
        'USER': os.environ.get('QUERY_POSTGRES_USER', 'postgres'),
        'PASSWORD': os.environ.get('QUERY_POSTGRES_PASSWORD', ''),
        'OPTIONS': {},
        'CONN_MAX_AGE': 0,
        'CONN_HEALTH_CHECKS': False,
    },

    # MySQL database for query execution
    # Note: Uncomment when deploying to hosting service with MySQL support
    'query_mysql': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ.get('QUERY_MYSQL_DB_NAME', 'sqlplayground_queries_mysql'),
        'HOST': os.environ.get('QUERY_MYSQL_HOST', 'localhost'),
        'PORT': os.environ.get('QUERY_MYSQL_PORT', '3306'),
        'USER': os.environ.get('QUERY_MYSQL_USER', 'root'),
        'PASSWORD': os.environ.get('QUERY_MYSQL_PASSWORD', 'forgex99'),
        'OPTIONS': {
            'charset': 'utf8mb4',
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        },
        'CONN_MAX_AGE': 0,
        'CONN_HEALTH_CHECKS': False,
    }
}

# Database Router for directing queries to appropriate databases
DATABASE_ROUTERS = ['sqlplayground.routers.DatabaseRouter']


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = os.environ.get('LANGUAGE_CODE', 'en-us')

TIME_ZONE = os.environ.get('TIME_ZONE', 'UTC')

USE_I18N = os.environ.get('USE_I18N', 'True').lower() == 'true'

USE_TZ = os.environ.get('USE_TZ', 'True').lower() == 'true'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = os.environ.get('STATIC_URL', '/static/')
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STATIC_ROOT = BASE_DIR / "staticfiles"

# WhiteNoise configuration for serving static files in production
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Media files
MEDIA_URL = os.environ.get('MEDIA_URL', '/media/')
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom User Model
AUTH_USER_MODEL = "users.User"

# Login/Logout URLs
LOGIN_URL = "/auth/login/"
LOGIN_REDIRECT_URL = "/dashboard/"
LOGOUT_REDIRECT_URL = "/"

# Django Sites Framework
SITE_ID = 1

# Authentication Backends
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]





# Login/Logout URLs
LOGIN_URL = '/auth/login/'
LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/challenges/'

# Email Configuration
EMAIL_BACKEND = os.environ.get('EMAIL_BACKEND', 'django.core.mail.backends.smtp.EmailBackend')
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '587'))
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True').lower() == 'true'
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')  # Your Gmail address
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')  # Your Gmail App Password
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'KodeSQL <noreply@kodesql.com>')

# For development, you can also use console backend to see emails in terminal
# EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

# Razorpay Payment Gateway Settings
RAZORPAY_KEY_ID = os.environ.get("RAZORPAY_KEY_ID", "rzp_test_Pga5LHwoLA4ii2")
RAZORPAY_KEY_SECRET = os.environ.get("RAZORPAY_KEY_SECRET", "klHsZRbqTLLgWzwnB3G2bNhp")
RAZORPAY_CURRENCY = os.environ.get("RAZORPAY_CURRENCY", "INR")
RAZORPAY_WEBHOOK_SECRET = os.environ.get("RAZORPAY_WEBHOOK_SECRET", "")
RAZORPAY_LIVE_MODE = os.environ.get('RAZORPAY_LIVE_MODE', 'False').lower() == 'true'

# Site URL for Razorpay redirects and email links
# Production URL for kodesql.in
SITE_URL = os.environ.get('SITE_URL', 'https://kodesql.in')

# Base URL for email links (can be different from SITE_URL if needed)
# This ensures verification emails and other email links use the correct domain/port
EMAIL_BASE_URL = os.environ.get('EMAIL_BASE_URL', SITE_URL)

# Messages Framework
MESSAGE_TAGS = {
    messages.DEBUG: 'debug',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'error',
}

# =============================================================================
# SQL CHALLENGE EXECUTION SETTINGS
# =============================================================================

# Database connection settings for SQL challenge query execution
# These settings are used by the challenge execution engine to connect to
# the appropriate databases for running user SQL queries

# PostgreSQL connection settings for challenge execution
POSTGRESQL_HOST = os.environ.get('QUERY_POSTGRES_HOST', 'localhost')
POSTGRESQL_PORT = int(os.environ.get('QUERY_POSTGRES_PORT', '5432'))
POSTGRESQL_USER = os.environ.get('QUERY_POSTGRES_USER', 'postgres')
POSTGRESQL_PASSWORD = os.environ.get('QUERY_POSTGRES_PASSWORD', '')
POSTGRESQL_DB = os.environ.get('QUERY_POSTGRES_DB_NAME', 'sqlplayground_queries_pg')

# MySQL connection settings for challenge execution
MYSQL_HOST = os.environ.get('QUERY_MYSQL_HOST', 'localhost')
MYSQL_PORT = int(os.environ.get('QUERY_MYSQL_PORT', '3306'))
MYSQL_USER = os.environ.get('QUERY_MYSQL_USER', 'root')
MYSQL_PASSWORD = os.environ.get('QUERY_MYSQL_PASSWORD', 'forgex99')
MYSQL_DB = os.environ.get('QUERY_MYSQL_DB_NAME', 'sqlplayground_queries_mysql')



# =============================================================================
# SECURITY SETTINGS
# =============================================================================

SECURE_BROWSER_XSS_FILTER = os.environ.get('SECURE_BROWSER_XSS_FILTER', 'True').lower() == 'true'
SECURE_CONTENT_TYPE_NOSNIFF = os.environ.get('SECURE_CONTENT_TYPE_NOSNIFF', 'True').lower() == 'true'
X_FRAME_OPTIONS = os.environ.get('X_FRAME_OPTIONS', 'DENY')

# HTTPS Security Settings for Production
SECURE_SSL_REDIRECT = os.environ.get('SECURE_SSL_REDIRECT', 'False').lower() == 'true'
SECURE_HSTS_SECONDS = int(os.environ.get('SECURE_HSTS_SECONDS', '0'))
SECURE_HSTS_INCLUDE_SUBDOMAINS = os.environ.get('SECURE_HSTS_INCLUDE_SUBDOMAINS', 'False').lower() == 'true'
SECURE_HSTS_PRELOAD = os.environ.get('SECURE_HSTS_PRELOAD', 'False').lower() == 'true'
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https') if os.environ.get('SECURE_PROXY_SSL_HEADER') else None

# Session Settings
SESSION_COOKIE_AGE = int(os.environ.get('SESSION_COOKIE_AGE', '86400'))  # 24 hours
SESSION_SAVE_EVERY_REQUEST = os.environ.get('SESSION_SAVE_EVERY_REQUEST', 'True').lower() == 'true'
SESSION_COOKIE_SECURE = os.environ.get('SESSION_COOKIE_SECURE', 'False').lower() == 'true'
SESSION_COOKIE_HTTPONLY = os.environ.get('SESSION_COOKIE_HTTPONLY', 'True').lower() == 'true'
SESSION_COOKIE_SAMESITE = os.environ.get('SESSION_COOKIE_SAMESITE', 'Lax')

# CSRF Settings
CSRF_COOKIE_AGE = int(os.environ.get('CSRF_COOKIE_AGE', '31449600'))  # 1 year
CSRF_COOKIE_HTTPONLY = os.environ.get('CSRF_COOKIE_HTTPONLY', 'False').lower() == 'true'
CSRF_COOKIE_SAMESITE = os.environ.get('CSRF_COOKIE_SAMESITE', 'Lax')
CSRF_USE_SESSIONS = os.environ.get('CSRF_USE_SESSIONS', 'False').lower() == 'true'
CSRF_COOKIE_SECURE = os.environ.get('CSRF_COOKIE_SECURE', 'False').lower() == 'true'

# CSRF Trusted Origins - Add production domain and development domains
CSRF_TRUSTED_ORIGINS = os.environ.get('CSRF_TRUSTED_ORIGINS', '').split(',') if os.environ.get('CSRF_TRUSTED_ORIGINS') else [
    "https://kodesql.in",
    "https://www.kodesql.in",
    "http://127.0.0.1:8000",
    "http://localhost:8000",
    "http://127.0.0.1:8007",
    "http://localhost:8007",
]

# CKEditor 5 Configuration
CKEDITOR_5_UPLOAD_PATH = os.environ.get('CKEDITOR_5_UPLOAD_PATH', 'uploads/')
CKEDITOR_5_IMAGE_UPLOAD_ENABLED = os.environ.get('CKEDITOR_5_IMAGE_UPLOAD_ENABLED', 'True').lower() == 'true'
CKEDITOR_5_FILE_UPLOAD_ENABLED = os.environ.get('CKEDITOR_5_FILE_UPLOAD_ENABLED', 'True').lower() == 'true'

CKEDITOR_5_CONFIGS = {
    'default': {
        'toolbar': [
            'heading', '|',
            'bold', 'italic', 'underline', 'strikethrough', '|',
            'bulletedList', 'numberedList', '|',
            'outdent', 'indent', '|',
            'link', 'insertImage', 'insertTable', '|',
            'blockQuote', 'codeBlock', '|',
            'undo', 'redo'
        ],
        'height': 300,
        'width': '100%',
        'image': {
            'toolbar': [
                'imageTextAlternative', 'imageStyle:full', 'imageStyle:side'
            ]
        },
        'table': {
            'contentToolbar': [
                'tableColumn', 'tableRow', 'mergeTableCells'
            ]
        },
        'heading': {
            'options': [
                {'model': 'paragraph', 'title': 'Paragraph', 'class': 'ck-heading_paragraph'},
                {'model': 'heading1', 'view': 'h1', 'title': 'Heading 1', 'class': 'ck-heading_heading1'},
                {'model': 'heading2', 'view': 'h2', 'title': 'Heading 2', 'class': 'ck-heading_heading2'},
                {'model': 'heading3', 'view': 'h3', 'title': 'Heading 3', 'class': 'ck-heading_heading3'},
            ]
        }
    },
    'tutorial': {
        'toolbar': [
            'heading', '|',
            'bold', 'italic', 'underline', '|',
            'bulletedList', 'numberedList', '|',
            'link', 'insertImage', '|',
            'codeBlock', 'blockQuote', '|',
            'undo', 'redo'
        ],
        'height': 400,
        'width': '100%',
        'codeBlock': {
            'languages': [
                {'language': 'sql', 'label': 'SQL'},
                {'language': 'javascript', 'label': 'JavaScript'},
                {'language': 'python', 'label': 'Python'},
                {'language': 'html', 'label': 'HTML'},
                {'language': 'css', 'label': 'CSS'},
            ]
        }
    },
    'clean': {
        'toolbar': [
            'heading', '|',
            'bold', 'italic', 'underline', '|',
            'bulletedList', 'numberedList', '|',
            'outdent', 'indent', '|',
            'link', 'insertImage', '|',
            'codeBlock', 'blockQuote', '|',
            'undo', 'redo'
        ],
        'height': 300,
        'width': '100%',
        'removePlugins': ['WordCount', 'CharacterCount'],
        'codeBlock': {
            'languages': [
                {'language': 'sql', 'label': 'SQL'},
                {'language': 'javascript', 'label': 'JavaScript'},
                {'language': 'python', 'label': 'Python'},
                {'language': 'html', 'label': 'HTML'},
                {'language': 'css', 'label': 'CSS'},
            ]
        },
        'heading': {
            'options': [
                {'model': 'paragraph', 'title': 'Paragraph', 'class': 'ck-heading_paragraph'},
                {'model': 'heading1', 'view': 'h1', 'title': 'Heading 1', 'class': 'ck-heading_heading1'},
                {'model': 'heading2', 'view': 'h2', 'title': 'Heading 2', 'class': 'ck-heading_heading2'},
                {'model': 'heading3', 'view': 'h3', 'title': 'Heading 3', 'class': 'ck-heading_heading3'},
            ]
        },
        'wordCount': {
            'displayCharacters': False,
            'displayWords': False
        }
    }
}

# Admin Interface Configuration
SILENCED_SYSTEM_CHECKS = ["security.W019"]

# File Upload Settings
FILE_UPLOAD_MAX_MEMORY_SIZE = int(os.environ.get('FILE_UPLOAD_MAX_MEMORY_SIZE', '10485760'))  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = int(os.environ.get('DATA_UPLOAD_MAX_MEMORY_SIZE', '10485760'))  # 10MB

# =============================================================================
# LEGACY SETTINGS (Kept for backward compatibility)
# =============================================================================
# Note: These settings are maintained for any legacy code that might reference them
# The new dual-dataset system in challenges doesn't use these predefined schemas

# Legacy predefined schemas (no longer used by new challenge system)
CHALLENGE_DATABASE_SCHEMAS = {
    'employees': {
        'name': 'Employee Database (Legacy)',
        'description': 'Legacy employee database schema',
        'initialization_sql': {
            'postgresql': """
                CREATE TABLE IF NOT EXISTS employees (
                    id SERIAL PRIMARY KEY,
                    name VARCHAR(255),
                    department VARCHAR(255),
                    salary INTEGER
                );
            """,
            'mysql': """
                CREATE TABLE IF NOT EXISTS employees (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    name VARCHAR(255),
                    department VARCHAR(255),
                    salary INTEGER
                );
            """
        }
    }
}

# ============================================================================
# DJANGO ALLAUTH CONFIGURATION
# ============================================================================

# Allauth settings (updated for latest version)
ACCOUNT_LOGIN_METHODS = {'email'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_USER_MODEL_EMAIL_FIELD = 'email'
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1
ACCOUNT_RATE_LIMITS = {
    'login_failed': '5/5m',  # 5 attempts per 5 minutes
}
ACCOUNT_LOGOUT_ON_GET = False
ACCOUNT_PRESERVE_USERNAME_CASING = False
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_USERNAME_BLACKLIST = ['admin', 'root', 'administrator']

# Social account settings
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'  # Skip email verification for social accounts
SOCIALACCOUNT_EMAIL_REQUIRED = True
SOCIALACCOUNT_QUERY_EMAIL = True
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_LOGIN_ON_GET = True  # Direct OAuth flow without intermediate pages

# Google OAuth settings
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'OAUTH_PKCE_ENABLED': True,
        'FETCH_USERINFO': True,
        'APP': {
            'client_id': os.environ.get('GOOGLE_OAUTH_CLIENT_ID', ''),
            'secret': os.environ.get('GOOGLE_OAUTH_CLIENT_SECRET', ''),
            'key': ''
        }
    }
}

# Custom adapter for handling OAuth user creation
SOCIALACCOUNT_ADAPTER = 'users.adapters.CustomSocialAccountAdapter'

# Redirect URLs
ACCOUNT_LOGIN_REDIRECT_URL = '/dashboard/'
ACCOUNT_LOGOUT_REDIRECT_URL = '/'
ACCOUNT_SIGNUP_REDIRECT_URL = '/dashboard/'

# Forms
ACCOUNT_FORMS = {
    'login': 'users.forms.CustomAllauthLoginForm',
    'signup': 'users.forms.CustomAllauthSignupForm',
}


